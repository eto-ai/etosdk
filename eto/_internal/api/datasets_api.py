"""
    Eto API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.11.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from eto._internal.api_client import ApiClient
from eto._internal.api_client import Endpoint as _Endpoint
from eto._internal.model.dataset_details import DatasetDetails
from eto._internal.model.download_dataset200_response import DownloadDataset200Response
from eto._internal.model.embeddings_response import EmbeddingsResponse
from eto._internal.model.get_download_job200_response import GetDownloadJob200Response
from eto._internal.model.list_dataset_insights200_response import (
    ListDatasetInsights200Response,
)
from eto._internal.model.list_datasets200_response import ListDatasets200Response
from eto._internal.model.list_datasets404_response import ListDatasets404Response
from eto._internal.model.mislabels_result_set import MislabelsResultSet
from eto._internal.model.result_set import ResultSet
from eto._internal.model.similar_response import SimilarResponse
from eto._internal.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class DatasetsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.download_dataset_endpoint = _Endpoint(
            settings={
                "response_type": (DownloadDataset200Response,),
                "auth": [],
                "endpoint_path": "/api/v1/projects/{project_id}/datasets/{dataset_id}/download",
                "operation_id": "download_dataset",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "dataset_id",
                    "filter",
                ],
                "required": [
                    "project_id",
                    "dataset_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "dataset_id": (str,),
                    "filter": (str,),
                },
                "attribute_map": {
                    "project_id": "project_id",
                    "dataset_id": "dataset_id",
                    "filter": "filter",
                },
                "location_map": {
                    "project_id": "path",
                    "dataset_id": "path",
                    "filter": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["*/*"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_dataset_endpoint = _Endpoint(
            settings={
                "response_type": (DatasetDetails,),
                "auth": [],
                "endpoint_path": "/api/v1/projects/{project_id}/datasets/{dataset_id}",
                "operation_id": "get_dataset",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "dataset_id",
                ],
                "required": [
                    "project_id",
                    "dataset_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "dataset_id": (str,),
                },
                "attribute_map": {
                    "project_id": "project_id",
                    "dataset_id": "dataset_id",
                },
                "location_map": {
                    "project_id": "path",
                    "dataset_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["*/*"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_download_job_endpoint = _Endpoint(
            settings={
                "response_type": (GetDownloadJob200Response,),
                "auth": [],
                "endpoint_path": "/api/v1/projects/{project_id}/datasets/{dataset_id}/download/{job_id}",
                "operation_id": "get_download_job",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "dataset_id",
                    "job_id",
                ],
                "required": [
                    "project_id",
                    "dataset_id",
                    "job_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "dataset_id": (str,),
                    "job_id": (str,),
                },
                "attribute_map": {
                    "project_id": "project_id",
                    "dataset_id": "dataset_id",
                    "job_id": "job_id",
                },
                "location_map": {
                    "project_id": "path",
                    "dataset_id": "path",
                    "job_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["*/*"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_embeddings_endpoint = _Endpoint(
            settings={
                "response_type": (EmbeddingsResponse,),
                "auth": [],
                "endpoint_path": "/api/v1/projects/{project_id}/datasets/{dataset_id}/embeddings",
                "operation_id": "get_embeddings",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "dataset_id",
                    "limit",
                ],
                "required": [
                    "project_id",
                    "dataset_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "dataset_id": (str,),
                    "limit": (int,),
                },
                "attribute_map": {
                    "project_id": "project_id",
                    "dataset_id": "dataset_id",
                    "limit": "limit",
                },
                "location_map": {
                    "project_id": "path",
                    "dataset_id": "path",
                    "limit": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["*/*"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_mislabels_endpoint = _Endpoint(
            settings={
                "response_type": (MislabelsResultSet,),
                "auth": [],
                "endpoint_path": "/api/v1/projects/{project_id}/datasets/{dataset_id}/mislabels",
                "operation_id": "get_mislabels",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "dataset_id",
                    "filter",
                    "limit",
                    "offset",
                ],
                "required": [
                    "project_id",
                    "dataset_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "dataset_id": (str,),
                    "filter": (str,),
                    "limit": (int,),
                    "offset": (int,),
                },
                "attribute_map": {
                    "project_id": "project_id",
                    "dataset_id": "dataset_id",
                    "filter": "filter",
                    "limit": "limit",
                    "offset": "offset",
                },
                "location_map": {
                    "project_id": "path",
                    "dataset_id": "path",
                    "filter": "query",
                    "limit": "query",
                    "offset": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["*/*"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_similar_endpoint = _Endpoint(
            settings={
                "response_type": (SimilarResponse,),
                "auth": [],
                "endpoint_path": "/api/v1/projects/{project_id}/datasets/{dataset_id}/similar",
                "operation_id": "get_similar",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "dataset_id",
                    "limit",
                    "source",
                ],
                "required": [
                    "project_id",
                    "dataset_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "dataset_id": (str,),
                    "limit": (int,),
                    "source": (str,),
                },
                "attribute_map": {
                    "project_id": "project_id",
                    "dataset_id": "dataset_id",
                    "limit": "limit",
                    "source": "source",
                },
                "location_map": {
                    "project_id": "path",
                    "dataset_id": "path",
                    "limit": "query",
                    "source": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["*/*"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.list_dataset_insights_endpoint = _Endpoint(
            settings={
                "response_type": (ListDatasetInsights200Response,),
                "auth": [],
                "endpoint_path": "/api/v1/projects/{project_id}/datasets/{dataset_id}/insights",
                "operation_id": "list_dataset_insights",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "dataset_id",
                ],
                "required": [
                    "project_id",
                    "dataset_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "dataset_id": (str,),
                },
                "attribute_map": {
                    "project_id": "project_id",
                    "dataset_id": "dataset_id",
                },
                "location_map": {
                    "project_id": "path",
                    "dataset_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["*/*"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.list_datasets_endpoint = _Endpoint(
            settings={
                "response_type": (ListDatasets200Response,),
                "auth": [],
                "endpoint_path": "/api/v1/projects/{project_id}/datasets",
                "operation_id": "list_datasets",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                ],
                "required": [
                    "project_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                },
                "attribute_map": {
                    "project_id": "project_id",
                },
                "location_map": {
                    "project_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["*/*"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.preview_endpoint = _Endpoint(
            settings={
                "response_type": (ResultSet,),
                "auth": [],
                "endpoint_path": "/api/v1/projects/{project_id}/datasets/{dataset_id}/preview",
                "operation_id": "preview",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "dataset_id",
                    "filter",
                    "limit",
                    "offset",
                ],
                "required": [
                    "project_id",
                    "dataset_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "dataset_id": (str,),
                    "filter": (str,),
                    "limit": (int,),
                    "offset": (int,),
                },
                "attribute_map": {
                    "project_id": "project_id",
                    "dataset_id": "dataset_id",
                    "filter": "filter",
                    "limit": "limit",
                    "offset": "offset",
                },
                "location_map": {
                    "project_id": "path",
                    "dataset_id": "path",
                    "filter": "query",
                    "limit": "query",
                    "offset": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["*/*"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def download_dataset(self, project_id, dataset_id, **kwargs):
        """Download a dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_dataset(project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (str): project id
            dataset_id (str): dataset id

        Keyword Args:
            filter (str): filters to be applied. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DownloadDataset200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["project_id"] = project_id
        kwargs["dataset_id"] = dataset_id
        return self.download_dataset_endpoint.call_with_http_info(**kwargs)

    def get_dataset(self, project_id, dataset_id, **kwargs):
        """Get dataset details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dataset(project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (str): project id
            dataset_id (str): dataset id

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DatasetDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["project_id"] = project_id
        kwargs["dataset_id"] = dataset_id
        return self.get_dataset_endpoint.call_with_http_info(**kwargs)

    def get_download_job(self, project_id, dataset_id, job_id, **kwargs):
        """Get status of a download job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_download_job(project_id, dataset_id, job_id, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (str): project id
            dataset_id (str): dataset id
            job_id (str): job id

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetDownloadJob200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["project_id"] = project_id
        kwargs["dataset_id"] = dataset_id
        kwargs["job_id"] = job_id
        return self.get_download_job_endpoint.call_with_http_info(**kwargs)

    def get_embeddings(self, project_id, dataset_id, **kwargs):
        """Retrieve embeddings data for visualization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_embeddings(project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (str): project id
            dataset_id (str): dataset id

        Keyword Args:
            limit (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmbeddingsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["project_id"] = project_id
        kwargs["dataset_id"] = dataset_id
        return self.get_embeddings_endpoint.call_with_http_info(**kwargs)

    def get_mislabels(self, project_id, dataset_id, **kwargs):
        """Retrieve mislabeled data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mislabels(project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (str): project id
            dataset_id (str): dataset id

        Keyword Args:
            filter (str): filters to be applied. [optional]
            limit (int): [optional]
            offset (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MislabelsResultSet
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["project_id"] = project_id
        kwargs["dataset_id"] = dataset_id
        return self.get_mislabels_endpoint.call_with_http_info(**kwargs)

    def get_similar(self, project_id, dataset_id, **kwargs):
        """Retrieve most similar observations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_similar(project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (str): project id
            dataset_id (str): dataset id

        Keyword Args:
            limit (int): [optional]
            source (str): primary key of the source vector. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SimilarResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["project_id"] = project_id
        kwargs["dataset_id"] = dataset_id
        return self.get_similar_endpoint.call_with_http_info(**kwargs)

    def list_dataset_insights(self, project_id, dataset_id, **kwargs):
        """Get a list of insights for this dataset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_dataset_insights(project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (str): project id
            dataset_id (str): dataset id

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListDatasetInsights200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["project_id"] = project_id
        kwargs["dataset_id"] = dataset_id
        return self.list_dataset_insights_endpoint.call_with_http_info(**kwargs)

    def list_datasets(self, project_id, **kwargs):
        """Show all datasets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_datasets(project_id, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListDatasets200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["project_id"] = project_id
        return self.list_datasets_endpoint.call_with_http_info(**kwargs)

    def preview(self, project_id, dataset_id, **kwargs):
        """Preview records in a dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.preview(project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (str): project id
            dataset_id (str): dataset id

        Keyword Args:
            filter (str): filters to be applied. [optional]
            limit (int): [optional]
            offset (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ResultSet
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["project_id"] = project_id
        kwargs["dataset_id"] = dataset_id
        return self.preview_endpoint.call_with_http_info(**kwargs)
